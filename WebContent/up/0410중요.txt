서블릿이 빠름 jsp는 실행하면 자동으로 서블릿파일을 만듬
hello,jsp파일을 만들면 hello_jsp라는 서블릿을 만듬
내부코드로 서블릿으로 변환한 다음에 서블릿을 실행하는 방식
서블릿만으로는 어려우니까 좀 편하게 만든게 jsp파일이다

jsp는 원래 서블릿이 작동해서 돌아가는데 되겠다

그안에 객체생성하고 ****jspinit(), jspService(), jspDestroy()세가지 자동호출
destroy는 거의없고 애를 돌리기 위해서 클래스하나가 작동된다

라이프사이클 세개 무조건 외우기~
init()
service()
destroy()

클래스가 작동될떄 init()은 최초로한번 호출
service()요청될때마다 호출

내장객체 아홉개 무조건외우기~ 
영역
request, (response), session, application, page
설정
config, 
페이지에 필요한 내용
pageContext 
출력용객체
out
에러체크
exception


내장객체? => 만들지 않았음에도 불구하고 미리 만들어져있는애들


page
-단일 페이지
request
-동일한 url (하나로 여러페이지를 열 수 있다.)
- 요청을 하면 받아들이는 정보가 무엇인지
response
-출력방식을 바꿔치기할 수 있따.
-쿠키라든가 다시 요청할떄
-
session
-서버와 클라이언트가 서로 연결이 되어있는 정보상태
-남의 컴퓨터 들어오면 세션상태 확인
-여러분의 클라이언트가 서버와 연결이 되어있는 상태가 세션이 살아있는 상태
-브라우저가 닫히기 전까지
application
-서버가 재가동되기 전까지
-서버가 켜져있는동안 살아있다.
-서버가 살아있는동안 동일한 정보를 줌
pageContext
-어떤context에 대한 정보를 갖고있음 객체들의 정보
config
-페이지가 갖고있는 정보들

///////////////////////카페내용/////////////////////////////
page : 현재 단일 페이지 내에서만 사용가능

request : url의 변경이 없는 페이지 내에서 사용가능 (include, forward 에서는 같이 사용 가능함)

session : 브라우져의 존속이나 sesssion속성을 유지할 경우 사용가능

                    (브라우져 종료, session 의 초기화 , 각 속성의 삭제 시에 새로 갱신됨)

application : 서버의 갱신 전까지 사용가능 

                   (서버 재시작시 새로 갱신됨)

/////////////////////////////////////////////////////////////

JSP Tag
***1.스크립트태그 <%@ >
 - 지시어
	page
	include
	taglib
***** - 스크립팅원소
	**declaration <%! >  -------- init()과 유사
	**scriptlet <% >  -------------service()와 유사
	
		*****public void_jspService() 형태*****
	
	**expression <%= > ------- out과 유사	

2.액션태그

3.EL


메소드안에 메소듬 못만듬
이너클래스 만들수있다.